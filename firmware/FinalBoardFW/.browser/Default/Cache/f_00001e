{"html":"\n      <article>\n        <div class=\"header\">\n  \n  <div class=\"headertitle\">\n  <h1 class=\"title\">Microphone<\/h1><\/div>\n<\/div><!--header-->\n<div class=\"contents\">\n<a name=\"details\" id=\"details\"><\/a><h2 class=\"groupheader\">Description<\/h2>\n<p>Sound level driver for PDM and I2S microphones. <\/p>\n<p><br>\n <\/p>\n<h1><a class=\"anchor\" id=\"mic-example\"><\/a>\nMicrophone example code<\/h1>\n<p>Basic example for looping measurement of sound level: <br>\n <br>\n<\/p><pre class=\"fragment\">#include \"sl_mic.h\"\n\n#define MIC_SAMPLE_RATE            44100\n#define MIC_SAMPLE_BUFFER_SIZE     1024\n#define MIC_N_CHANNELS             2\n\n  static int16_t buffer[MIC_SAMPLE_BUFFER_SIZE * MIC_N_CHANNELS];\n\n  int main( void )\n  {\n\n   ...\n   float sound_level_0;\n   float sound_level_1;\n   uint32_t n_samples = 1024;\n\n   // Initialize microphone with sample rate and number of channels\n   sl_mic_init(MIC_SAMPLE_RATE, MIC_N_CHANNELS);\n\n   while(true){\n\n     // Read samples from the microphone\n     sl_mic_get_n_samples(buffer, n_samples);\n\n     while (!sl_mic_sample_buffer_ready()) {\n       // Wait until sample buffer ready\n     }\n\n     // Calculate sound level\n     sl_mic_calculate_sound_level(&amp;sound_level_0, buffer, n_samples, 0);\n     sl_mic_calculate_sound_level(&amp;sound_level_1, buffer, n_samples, 1);\n\n   }\n\n   ...\n\n  } <\/pre> <table class=\"memberdecls\">\n<tbody><tr class=\"heading\"><td colspan=\"2\"><h2 class=\"groupheader\"><a name=\"func-members\"><\/a>\nFunctions<\/h2><\/td><\/tr>\n<tr class=\"memitem\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">sl_status_t&nbsp;<\/td><td class=\"memItemRight\" valign=\"bottom\"><a href=\"#ga9aa3bd76e231fbb07881f0624c70f9f0\" class=\"el\">sl_mic_init<\/a> (uint32_t sample_rate, uint8_t channels)<\/td><\/tr>\n<tr class=\"memdesc\"><td class=\"mdescLeft\">&nbsp;<\/td><td class=\"mdescRight\">Initialize the microphone.  <br><\/td><\/tr>\n<tr class=\"separator\"><td class=\"memSeparator\" colspan=\"2\">&nbsp;<\/td><\/tr>\n<tr class=\"memitem\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">sl_status_t&nbsp;<\/td><td class=\"memItemRight\" valign=\"bottom\"><a href=\"#gade014c8a5d33c7b09be3478e1184e98c\" class=\"el\">sl_mic_deinit<\/a> (void)<\/td><\/tr>\n<tr class=\"memdesc\"><td class=\"mdescLeft\">&nbsp;<\/td><td class=\"mdescRight\">De-initialize the microphone.  <br><\/td><\/tr>\n<tr class=\"separator\"><td class=\"memSeparator\" colspan=\"2\">&nbsp;<\/td><\/tr>\n<tr class=\"memitem\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">sl_status_t&nbsp;<\/td><td class=\"memItemRight\" valign=\"bottom\"><a href=\"#gabe86be511f48cc95d550f45eb82b4203\" class=\"el\">sl_mic_get_n_samples<\/a> (void *buffer, uint32_t n_frames)<\/td><\/tr>\n<tr class=\"memdesc\"><td class=\"mdescLeft\">&nbsp;<\/td><td class=\"mdescRight\">Read samples from the microphone into a sample buffer.  <br><\/td><\/tr>\n<tr class=\"separator\"><td class=\"memSeparator\" colspan=\"2\">&nbsp;<\/td><\/tr>\n<tr class=\"memitem\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">sl_status_t&nbsp;<\/td><td class=\"memItemRight\" valign=\"bottom\"><a href=\"#ga8af3c88d412442d8d6f6de3f6b8267a1\" class=\"el\">sl_mic_start_streaming<\/a> (void *buffer, uint32_t n_frames, <a href=\"#ga532baaf9b9be569b8cb0308c9d50a02c\" class=\"el\">sl_mic_buffer_ready_callback_t<\/a> callback)<\/td><\/tr>\n<tr class=\"memdesc\"><td class=\"mdescLeft\">&nbsp;<\/td><td class=\"mdescRight\">Read samples from the microphone into a sample buffer continuously.  <br><\/td><\/tr>\n<tr class=\"separator\"><td class=\"memSeparator\" colspan=\"2\">&nbsp;<\/td><\/tr>\n<tr class=\"memitem\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">sl_status_t&nbsp;<\/td><td class=\"memItemRight\" valign=\"bottom\"><a href=\"#gaf6372cc4877b791be47980a27582a87f\" class=\"el\">sl_mic_start<\/a> (void)<\/td><\/tr>\n<tr class=\"memdesc\"><td class=\"mdescLeft\">&nbsp;<\/td><td class=\"mdescRight\">Start the microphone.  <br><\/td><\/tr>\n<tr class=\"separator\"><td class=\"memSeparator\" colspan=\"2\">&nbsp;<\/td><\/tr>\n<tr class=\"memitem\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">sl_status_t&nbsp;<\/td><td class=\"memItemRight\" valign=\"bottom\"><a href=\"#ga61629107c3fcb1ef74cfce4be05c1617\" class=\"el\">sl_mic_stop<\/a> (void)<\/td><\/tr>\n<tr class=\"memdesc\"><td class=\"mdescLeft\">&nbsp;<\/td><td class=\"mdescRight\">Stop the microphone.  <br><\/td><\/tr>\n<tr class=\"separator\"><td class=\"memSeparator\" colspan=\"2\">&nbsp;<\/td><\/tr>\n<tr class=\"memitem\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">bool&nbsp;<\/td><td class=\"memItemRight\" valign=\"bottom\"><a href=\"#gac7837586a4b7508b204eb4a79de1309d\" class=\"el\">sl_mic_sample_buffer_ready<\/a> (void)<\/td><\/tr>\n<tr class=\"memdesc\"><td class=\"mdescLeft\">&nbsp;<\/td><td class=\"mdescRight\">Check whether the sample buffer is ready.  <br><\/td><\/tr>\n<tr class=\"separator\"><td class=\"memSeparator\" colspan=\"2\">&nbsp;<\/td><\/tr>\n<tr class=\"memitem\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">sl_status_t&nbsp;<\/td><td class=\"memItemRight\" valign=\"bottom\"><a href=\"#gafedfe3793049bb8dbe5e9ee7581f5dc1\" class=\"el\">sl_mic_calculate_sound_level<\/a> (float *sound_level, const int16_t *buffer, uint32_t n_frames, uint8_t channel)<\/td><\/tr>\n<tr class=\"memdesc\"><td class=\"mdescLeft\">&nbsp;<\/td><td class=\"mdescRight\">Calculate the dBSPL value for a channel from a sample buffer.  <br><\/td><\/tr>\n<tr class=\"separator\"><td class=\"memSeparator\" colspan=\"2\">&nbsp;<\/td><\/tr>\n<\/tbody><\/table><table class=\"memberdecls\">\n<tbody><tr class=\"heading\"><td colspan=\"2\"><h2 class=\"groupheader\"><a name=\"typedef-members\"><\/a>\nTypedefs<\/h2><\/td><\/tr>\n<tr class=\"memitem\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">typedef void(*&nbsp;<\/td><td class=\"memItemRight\" valign=\"bottom\"><a href=\"#ga532baaf9b9be569b8cb0308c9d50a02c\" class=\"el\">sl_mic_buffer_ready_callback_t<\/a>) (const void *buffer, uint32_t n_frames)<\/td><\/tr>\n<tr class=\"memdesc\"><td class=\"mdescLeft\">&nbsp;<\/td><td class=\"mdescRight\">Callback function indicating that the sample buffer is ready.  <br><\/td><\/tr>\n<tr class=\"separator\"><td class=\"memSeparator\" colspan=\"2\">&nbsp;<\/td><\/tr>\n<\/tbody><\/table>\n<h2 class=\"groupheader\">Function Documentation<\/h2>\n<a id=\"ga9aa3bd76e231fbb07881f0624c70f9f0\"><\/a>\n<h2 class=\"memtitle\"><span class=\"permalink\"><a href=\"#ga9aa3bd76e231fbb07881f0624c70f9f0\">◆&nbsp;<\/a><\/span>sl_mic_init()<\/h2>\n\n<div class=\"memitem\">\n<div class=\"memproto\">\n      <table class=\"memname\">\n        <tbody><tr>\n          <td class=\"memname\">sl_status_t sl_mic_init <\/td>\n          <td>(<\/td>\n          <td class=\"paramtype\">uint32_t&nbsp;<\/td>\n          <td class=\"paramname\"><code>sample_rate, <\/code><\/td>\n        <\/tr>\n        <tr>\n          <td class=\"paramkey\"><\/td>\n          <td><\/td>\n          <td class=\"paramtype\">uint8_t&nbsp;<\/td>\n          <td class=\"paramname\"><code>channels&nbsp;<\/code><\/td>\n        <\/tr>\n        <tr>\n          <td><\/td>\n          <td>)<\/td>\n          <td><\/td><td><\/td>\n        <\/tr>\n      <\/tbody><\/table>\n<\/div><div class=\"memdoc\">\n\n<p>Initialize the microphone. <\/p>\n<dl class=\"params\"><dt>Parameters<\/dt><dd>\n  <table class=\"params\">\n    <tbody><tr><td class=\"paramdir\">[in]<\/td><td class=\"paramname\"><code>sample_rate<\/code><\/td><td>The desired sample rate in Hz<\/td><\/tr>\n    <tr><td class=\"paramdir\">[in]<\/td><td class=\"paramname\"><code>channels<\/code><\/td><td>Number of audio channels (1 or 2)<\/td><\/tr>\n  <\/tbody><\/table>\n  <\/dd>\n<\/dl>\n<dl class=\"section return\"><dt>Returns<\/dt><dd>Returns SL_STATUS_OK on success, non-zero otherwise <\/dd><\/dl>\n\n<\/div>\n<\/div>\n<a id=\"gade014c8a5d33c7b09be3478e1184e98c\"><\/a>\n<h2 class=\"memtitle\"><span class=\"permalink\"><a href=\"#gade014c8a5d33c7b09be3478e1184e98c\">◆&nbsp;<\/a><\/span>sl_mic_deinit()<\/h2>\n\n<div class=\"memitem\">\n<div class=\"memproto\">\n      <table class=\"memname\">\n        <tbody><tr>\n          <td class=\"memname\">sl_status_t sl_mic_deinit <\/td>\n          <td>(<\/td>\n          <td class=\"paramtype\">void&nbsp;<\/td>\n          <td class=\"paramname\"><code><\/code><\/td><td>)<\/td>\n          <td><\/td>\n        <\/tr>\n      <\/tbody><\/table>\n<\/div><div class=\"memdoc\">\n\n<p>De-initialize the microphone. <\/p>\n<dl class=\"retval\"><dt>Return values<\/dt><dd>\n  <table class=\"retval\">\n    <tbody><tr><td class=\"paramname\"><code>SL_STATUS_OK<\/code><\/td><td><\/td><\/tr>\n  <\/tbody><\/table>\n  <\/dd>\n<\/dl>\n\n<\/div>\n<\/div>\n<a id=\"gabe86be511f48cc95d550f45eb82b4203\"><\/a>\n<h2 class=\"memtitle\"><span class=\"permalink\"><a href=\"#gabe86be511f48cc95d550f45eb82b4203\">◆&nbsp;<\/a><\/span>sl_mic_get_n_samples()<\/h2>\n\n<div class=\"memitem\">\n<div class=\"memproto\">\n      <table class=\"memname\">\n        <tbody><tr>\n          <td class=\"memname\">sl_status_t sl_mic_get_n_samples <\/td>\n          <td>(<\/td>\n          <td class=\"paramtype\">void *&nbsp;<\/td>\n          <td class=\"paramname\"><code>buffer, <\/code><\/td>\n        <\/tr>\n        <tr>\n          <td class=\"paramkey\"><\/td>\n          <td><\/td>\n          <td class=\"paramtype\">uint32_t&nbsp;<\/td>\n          <td class=\"paramname\"><code>n_frames&nbsp;<\/code><\/td>\n        <\/tr>\n        <tr>\n          <td><\/td>\n          <td>)<\/td>\n          <td><\/td><td><\/td>\n        <\/tr>\n      <\/tbody><\/table>\n<\/div><div class=\"memdoc\">\n\n<p>Read samples from the microphone into a sample buffer. <\/p>\n<p>This function starts the microphone sampling and stops the sampling after reading the desired number of samples. Call <a href=\"#gac7837586a4b7508b204eb4a79de1309d\" class=\"el\">sl_mic_sample_buffer_ready<\/a> to check when the samples are ready in the buffer.<\/p>\n<dl class=\"params\"><dt>Parameters<\/dt><dd>\n  <table class=\"params\">\n    <tbody><tr><td class=\"paramdir\">[in]<\/td><td class=\"paramname\"><code>buffer<\/code><\/td><td>Pointer to the sample buffer to store the data. 16-bit channel data is stored consecutively, starting with ch0<\/td><\/tr>\n    <tr><td class=\"paramdir\">[in]<\/td><td class=\"paramname\"><code>n_frames<\/code><\/td><td>The number of the audio frames to get<\/td><\/tr>\n  <\/tbody><\/table>\n  <\/dd>\n<\/dl>\n<dl class=\"retval\"><dt>Return values<\/dt><dd>\n  <table class=\"retval\">\n    <tbody><tr><td class=\"paramname\"><code>SL_STATUS_OK<\/code><\/td><td>Success. <\/td><\/tr>\n    <tr><td class=\"paramname\"><code>SL_STATUS_NOT_INITIALIZED<\/code><\/td><td>Not initialized. <\/td><\/tr>\n    <tr><td class=\"paramname\"><code>SL_STATUS_INVALID_STATE<\/code><\/td><td>Sampling is already in progress. <\/td><\/tr>\n  <\/tbody><\/table>\n  <\/dd>\n<\/dl>\n\n<\/div>\n<\/div>\n<a id=\"ga8af3c88d412442d8d6f6de3f6b8267a1\"><\/a>\n<h2 class=\"memtitle\"><span class=\"permalink\"><a href=\"#ga8af3c88d412442d8d6f6de3f6b8267a1\">◆&nbsp;<\/a><\/span>sl_mic_start_streaming()<\/h2>\n\n<div class=\"memitem\">\n<div class=\"memproto\">\n      <table class=\"memname\">\n        <tbody><tr>\n          <td class=\"memname\">sl_status_t sl_mic_start_streaming <\/td>\n          <td>(<\/td>\n          <td class=\"paramtype\">void *&nbsp;<\/td>\n          <td class=\"paramname\"><code>buffer, <\/code><\/td>\n        <\/tr>\n        <tr>\n          <td class=\"paramkey\"><\/td>\n          <td><\/td>\n          <td class=\"paramtype\">uint32_t&nbsp;<\/td>\n          <td class=\"paramname\"><code>n_frames, <\/code><\/td>\n        <\/tr>\n        <tr>\n          <td class=\"paramkey\"><\/td>\n          <td><\/td>\n          <td class=\"paramtype\"><a href=\"#ga532baaf9b9be569b8cb0308c9d50a02c\" class=\"el\">sl_mic_buffer_ready_callback_t<\/a>&nbsp;<\/td>\n          <td class=\"paramname\"><code>callback&nbsp;<\/code><\/td>\n        <\/tr>\n        <tr>\n          <td><\/td>\n          <td>)<\/td>\n          <td><\/td><td><\/td>\n        <\/tr>\n      <\/tbody><\/table>\n<\/div><div class=\"memdoc\">\n\n<p>Read samples from the microphone into a sample buffer continuously. <\/p>\n<p>This function starts the microphone sampling and stops only upon calling <a href=\"#ga61629107c3fcb1ef74cfce4be05c1617\" class=\"el\">sl_mic_stop<\/a> or <a href=\"#gade014c8a5d33c7b09be3478e1184e98c\" class=\"el\">sl_mic_deinit<\/a>. The buffer is used in a \"ping-pong\" manner meaning that one half of the buffer is used for sampling while the other half is being processed.<\/p>\n<dl class=\"params\"><dt>Parameters<\/dt><dd>\n  <table class=\"params\">\n    <tbody><tr><td class=\"paramdir\">[in]<\/td><td class=\"paramname\"><code>buffer<\/code><\/td><td>Pointer to the sample buffer to store the data. 16-bit channel data is stored consecutively, starting with ch0. This buffer shall be big enough to hold twice the n_frames because of the ping-pong operation.<\/td><\/tr>\n    <tr><td class=\"paramdir\">[in]<\/td><td class=\"paramname\"><code>n_frames<\/code><\/td><td>The number of audio frames to receive before the callback is called. Maximum value limited by DMADRV_MAX_XFER_COUNT.<\/td><\/tr>\n    <tr><td class=\"paramdir\">[in]<\/td><td class=\"paramname\"><code>callback<\/code><\/td><td>Callback is called when n_frames in the sample buffer is ready.<\/td><\/tr>\n  <\/tbody><\/table>\n  <\/dd>\n<\/dl>\n<dl class=\"retval\"><dt>Return values<\/dt><dd>\n  <table class=\"retval\">\n    <tbody><tr><td class=\"paramname\"><code>SL_STATUS_OK<\/code><\/td><td>Success. <\/td><\/tr>\n    <tr><td class=\"paramname\"><code>SL_STATUS_NOT_INITIALIZED<\/code><\/td><td>Not initialized. <\/td><\/tr>\n    <tr><td class=\"paramname\"><code>SL_STATUS_INVALID_STATE<\/code><\/td><td>Sampling is already in progress. <\/td><\/tr>\n    <tr><td class=\"paramname\"><code>SL_STATUS_INVALID_PARAMETER<\/code><\/td><td>n_frames too large. <\/td><\/tr>\n  <\/tbody><\/table>\n  <\/dd>\n<\/dl>\n\n<\/div>\n<\/div>\n<a id=\"gaf6372cc4877b791be47980a27582a87f\"><\/a>\n<h2 class=\"memtitle\"><span class=\"permalink\"><a href=\"#gaf6372cc4877b791be47980a27582a87f\">◆&nbsp;<\/a><\/span>sl_mic_start()<\/h2>\n\n<div class=\"memitem\">\n<div class=\"memproto\">\n      <table class=\"memname\">\n        <tbody><tr>\n          <td class=\"memname\">sl_status_t sl_mic_start <\/td>\n          <td>(<\/td>\n          <td class=\"paramtype\">void&nbsp;<\/td>\n          <td class=\"paramname\"><code><\/code><\/td><td>)<\/td>\n          <td><\/td>\n        <\/tr>\n      <\/tbody><\/table>\n<\/div><div class=\"memdoc\">\n\n<p>Start the microphone. <\/p>\n<dl class=\"retval\"><dt>Return values<\/dt><dd>\n  <table class=\"retval\">\n    <tbody><tr><td class=\"paramname\"><code>SL_STATUS_OK<\/code><\/td><td>Success. <\/td><\/tr>\n    <tr><td class=\"paramname\"><code>SL_STATUS_NOT_INITIALIZED<\/code><\/td><td>Not initialized. <\/td><\/tr>\n    <tr><td class=\"paramname\"><code>SL_STATUS_INVALID_STATE<\/code><\/td><td>Microphone is already running. <\/td><\/tr>\n  <\/tbody><\/table>\n  <\/dd>\n<\/dl>\n\n<\/div>\n<\/div>\n<a id=\"ga61629107c3fcb1ef74cfce4be05c1617\"><\/a>\n<h2 class=\"memtitle\"><span class=\"permalink\"><a href=\"#ga61629107c3fcb1ef74cfce4be05c1617\">◆&nbsp;<\/a><\/span>sl_mic_stop()<\/h2>\n\n<div class=\"memitem\">\n<div class=\"memproto\">\n      <table class=\"memname\">\n        <tbody><tr>\n          <td class=\"memname\">sl_status_t sl_mic_stop <\/td>\n          <td>(<\/td>\n          <td class=\"paramtype\">void&nbsp;<\/td>\n          <td class=\"paramname\"><code><\/code><\/td><td>)<\/td>\n          <td><\/td>\n        <\/tr>\n      <\/tbody><\/table>\n<\/div><div class=\"memdoc\">\n\n<p>Stop the microphone. <\/p>\n<dl class=\"retval\"><dt>Return values<\/dt><dd>\n  <table class=\"retval\">\n    <tbody><tr><td class=\"paramname\"><code>SL_STATUS_OK<\/code><\/td><td>Success. <\/td><\/tr>\n    <tr><td class=\"paramname\"><code>SL_STATUS_INVALID_STATE<\/code><\/td><td>Microphone is not running. <\/td><\/tr>\n  <\/tbody><\/table>\n  <\/dd>\n<\/dl>\n\n<\/div>\n<\/div>\n<a id=\"gac7837586a4b7508b204eb4a79de1309d\"><\/a>\n<h2 class=\"memtitle\"><span class=\"permalink\"><a href=\"#gac7837586a4b7508b204eb4a79de1309d\">◆&nbsp;<\/a><\/span>sl_mic_sample_buffer_ready()<\/h2>\n\n<div class=\"memitem\">\n<div class=\"memproto\">\n      <table class=\"memname\">\n        <tbody><tr>\n          <td class=\"memname\">bool sl_mic_sample_buffer_ready <\/td>\n          <td>(<\/td>\n          <td class=\"paramtype\">void&nbsp;<\/td>\n          <td class=\"paramname\"><code><\/code><\/td><td>)<\/td>\n          <td><\/td>\n        <\/tr>\n      <\/tbody><\/table>\n<\/div><div class=\"memdoc\">\n\n<p>Check whether the sample buffer is ready. <\/p>\n<dl class=\"retval\"><dt>Return values<\/dt><dd>\n  <table class=\"retval\">\n    <tbody><tr><td class=\"paramname\"><code>true<\/code><\/td><td>All samples requested from microphone are ready. <\/td><\/tr>\n    <tr><td class=\"paramname\"><code>false<\/code><\/td><td>Samples are still being read into the buffer. <\/td><\/tr>\n  <\/tbody><\/table>\n  <\/dd>\n<\/dl>\n\n<\/div>\n<\/div>\n<a id=\"gafedfe3793049bb8dbe5e9ee7581f5dc1\"><\/a>\n<h2 class=\"memtitle\"><span class=\"permalink\"><a href=\"#gafedfe3793049bb8dbe5e9ee7581f5dc1\">◆&nbsp;<\/a><\/span>sl_mic_calculate_sound_level()<\/h2>\n\n<div class=\"memitem\">\n<div class=\"memproto\">\n      <table class=\"memname\">\n        <tbody><tr>\n          <td class=\"memname\">sl_status_t sl_mic_calculate_sound_level <\/td>\n          <td>(<\/td>\n          <td class=\"paramtype\">float *&nbsp;<\/td>\n          <td class=\"paramname\"><code>sound_level, <\/code><\/td>\n        <\/tr>\n        <tr>\n          <td class=\"paramkey\"><\/td>\n          <td><\/td>\n          <td class=\"paramtype\">const int16_t *&nbsp;<\/td>\n          <td class=\"paramname\"><code>buffer, <\/code><\/td>\n        <\/tr>\n        <tr>\n          <td class=\"paramkey\"><\/td>\n          <td><\/td>\n          <td class=\"paramtype\">uint32_t&nbsp;<\/td>\n          <td class=\"paramname\"><code>n_frames, <\/code><\/td>\n        <\/tr>\n        <tr>\n          <td class=\"paramkey\"><\/td>\n          <td><\/td>\n          <td class=\"paramtype\">uint8_t&nbsp;<\/td>\n          <td class=\"paramname\"><code>channel&nbsp;<\/code><\/td>\n        <\/tr>\n        <tr>\n          <td><\/td>\n          <td>)<\/td>\n          <td><\/td><td><\/td>\n        <\/tr>\n      <\/tbody><\/table>\n<\/div><div class=\"memdoc\">\n\n<p>Calculate the dBSPL value for a channel from a sample buffer. <\/p>\n<dl class=\"params\"><dt>Parameters<\/dt><dd>\n  <table class=\"params\">\n    <tbody><tr><td class=\"paramdir\">[out]<\/td><td class=\"paramname\"><code>sound_level<\/code><\/td><td>The calculated sound level<\/td><\/tr>\n    <tr><td class=\"paramdir\">[in]<\/td><td class=\"paramname\"><code>buffer<\/code><\/td><td>Buffer to calculate sound level from. Must contain 16-bit samples, starting with channel 0<\/td><\/tr>\n    <tr><td class=\"paramdir\">[in]<\/td><td class=\"paramname\"><code>n_frames<\/code><\/td><td>Number of audio frames to use when calculating sound level<\/td><\/tr>\n    <tr><td class=\"paramdir\">[in]<\/td><td class=\"paramname\"><code>channel<\/code><\/td><td>The channel to get the sound level for<\/td><\/tr>\n  <\/tbody><\/table>\n  <\/dd>\n<\/dl>\n<dl class=\"retval\"><dt>Return values<\/dt><dd>\n  <table class=\"retval\">\n    <tbody><tr><td class=\"paramname\"><code>SL_STATUS_OK<\/code><\/td><td>Success <\/td><\/tr>\n    <tr><td class=\"paramname\"><code>SL_STATUS_INVALID_PARAMETER<\/code><\/td><td>Invalid channel num <\/td><\/tr>\n  <\/tbody><\/table>\n  <\/dd>\n<\/dl>\n\n<\/div>\n<\/div>\n<h2 class=\"groupheader\">Typedef Documentation<\/h2>\n<a id=\"ga532baaf9b9be569b8cb0308c9d50a02c\"><\/a>\n<h2 class=\"memtitle\"><span class=\"permalink\"><a href=\"#ga532baaf9b9be569b8cb0308c9d50a02c\">◆&nbsp;<\/a><\/span>sl_mic_buffer_ready_callback_t<\/h2>\n\n<div class=\"memitem\">\n<div class=\"memproto\">\n      <table class=\"memname\">\n        <tbody><tr>\n          <td class=\"memname\">typedef void(* sl_mic_buffer_ready_callback_t) (const void *buffer, uint32_t n_frames)<\/td>\n        <\/tr>\n      <\/tbody><\/table>\n<\/div><div class=\"memdoc\">\n\n<p>Callback function indicating that the sample buffer is ready. <\/p>\n<dl class=\"params\"><dt>Parameters<\/dt><dd>\n  <table class=\"params\">\n    <tbody><tr><td class=\"paramdir\">[in]<\/td><td class=\"paramname\"><code>buffer<\/code><\/td><td>Pointer to the sample buffer.<\/td><\/tr>\n    <tr><td class=\"paramdir\">[in]<\/td><td class=\"paramname\"><code>n_frames<\/code><\/td><td>Number of audio frames in the sample buffer.<\/td><\/tr>\n  <\/tbody><\/table>\n  <\/dd>\n<\/dl>\n<dl class=\"section return\"><dt>Returns<\/dt><dd>None. <\/dd><\/dl>\n\n<\/div>\n<\/div>\n<\/div>\n      <div ub-in-page=\"6062051aebaf71079a7b414b\"><\/div>\n      <\/article>\n    ","url":"http://docs.silabs.com/gecko-platform/4.1/hardware-driver/api/group-mic","status":"success"}
